# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1riQStyp6ePgpYTIeYH8KwgFZQZ1r5-pj
"""

!wget https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip
!unzip rockpaperscissors.zip

import os
import shutil
from tensorflow.keras.preprocessing.image import ImageDataGenerator

base_dir = 'rockpaperscissors/rps-cv-images/'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'val')

if not os.path.exists(train_dir):
    os.makedirs(train_dir)
if not os.path.exists(validation_dir):
    os.makedirs(validation_dir)

classes = ['rock', 'paper', 'scissors']

for cls in classes:
    train_class_dir = os.path.join(train_dir, cls)
    val_class_dir = os.path.join(validation_dir, cls)

    if not os.path.exists(train_class_dir):
        os.makedirs(train_class_dir)
    if not os.path.exists(val_class_dir):
        os.makedirs(val_class_dir)

    images = os.listdir(os.path.join(base_dir, cls))
    num_images = len(images)
    num_val_images = int(0.4 * num_images)

    for image in images[:num_val_images]:
        src = os.path.join(base_dir, cls, image)
        dst = os.path.join(val_class_dir, image)
        shutil.copyfile(src, dst)

    for image in images[num_val_images:]:
        src = os.path.join(base_dir, cls, image)
        dst = os.path.join(train_class_dir, image)
        shutil.copyfile(src, dst)

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

validation_datagen = ImageDataGenerator(rescale=1./255)

validation_generator = validation_datagen.flow_from_directory(
    validation_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
import time

model_rps = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128, (3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(3, activation='softmax')
])

model_rps.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

start_time = time.time()

history = model_rps.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // 32,
    epochs=15,
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // 32
)

end_time = time.time()
execution_time = end_time - start_time
print("Training time:", execution_time, "seconds")

from tensorflow.keras.callbacks import EarlyStopping
import time

# Tentukan waktu maksimum pelatihan dalam detik
max_training_time = 1800  # 30 menit = 1800 detik

# Inisialisasi EarlyStopping callback
early_stopping = EarlyStopping(monitor='val_loss', patience=3, verbose=1)

start_time = time.time()

history = model_rps.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // 32,
    epochs=100,  # Jumlah epoch yang lebih besar dari yang diharapkan
    validation_data=validation_generator,
    validation_steps=validation_generator.samples // 32,
    callbacks=[early_stopping]  # Menggunakan callback EarlyStopping
)

end_time = time.time()
execution_time = end_time - start_time
print("Training time:", execution_time, "seconds")

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.legend()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import numpy as np
# %matplotlib inline

uploaded = files.upload()

for fn in uploaded.keys():
  # Prediksi gambar
  path = fn
  img = image.load_img(path, target_size=(150,150))  # Sesuaikan ukuran input model
  imgplot = plt.imshow(img)
  plt.axis('off')
  plt.show()

  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)

  images = np.vstack([x])
  classes = model_rps.predict(images, batch_size=32)

  print(fn)
  predicted_label = np.argmax(classes[0])  # Ambil index kelas dengan nilai tertinggi

  if predicted_label == 0:
    print('Paper')
  elif predicted_label == 1:
    print('Rock')
  elif predicted_label == 2:
    print('Scissors')
  else:
    print('Tidak dikenali')

